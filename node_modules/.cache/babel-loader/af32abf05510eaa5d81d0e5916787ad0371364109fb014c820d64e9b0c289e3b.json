{"ast":null,"code":"import './GlobalManager.css';\nexport default {\n  name: 'GlobalManager',\n  data() {\n    return {\n      users: [],\n      searchQuery: '',\n      currentPage: 1,\n      pageSize: 10 // Количество пользователей на странице\n    };\n  },\n  mounted() {\n    this.fetchUsers();\n  },\n  computed: {\n    filteredUsers() {\n      const query = this.searchQuery.toLowerCase();\n      return this.users.filter(user => {\n        return user.name.toLowerCase().includes(query);\n      });\n    },\n    totalPages() {\n      return Math.ceil(this.filteredUsers.length / this.pageSize);\n    },\n    paginatedUsers() {\n      const startIndex = (this.currentPage - 1) * this.pageSize;\n      const endIndex = startIndex + this.pageSize;\n      return this.filteredUsers.slice(startIndex, endIndex);\n    }\n  },\n  methods: {\n    async fetchUsers() {\n      try {\n        const response = await fetch('https://jsonplaceholder.typicode.com/users');\n        const data = await response.json();\n        this.users = data.map(user => ({\n          id: user.id,\n          name: user.name,\n          complaint: `Жалоба на ${user.name}`\n        }));\n      } catch (error) {\n        console.error('Ошибка при загрузке жалоб:', error);\n      }\n    },\n    filterUsers() {\n      // Метод фильтрации пользователей остается таким же\n      this.currentPage = 1; // При каждом новом поиске переключаемся на первую страницу\n    },\n    changePage(pageNumber) {\n      this.currentPage = pageNumber;\n    },\n    previousPage() {\n      if (this.currentPage > 1) {\n        this.currentPage--;\n      }\n    },\n    nextPage() {\n      if (this.currentPage < this.totalPages) {\n        this.currentPage++;\n      }\n    }\n  }\n};","map":{"version":3,"names":["name","data","users","searchQuery","currentPage","pageSize","mounted","fetchUsers","computed","filteredUsers","query","toLowerCase","filter","user","includes","totalPages","Math","ceil","length","paginatedUsers","startIndex","endIndex","slice","methods","response","fetch","json","map","id","complaint","error","console","filterUsers","changePage","pageNumber","previousPage","nextPage"],"sources":["/Users/neferuz/Desktop/ImellsAdmin/src/components/Manager/GlobalManager.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <div class=\"container\">\r\n            <div class=\"analizing\">\r\n                <h1>Все жалобы</h1>\r\n                <div class=\"poisk-con\">\r\n                    <input v-model=\"searchQuery\" @input=\"filterUsers\" placeholder=\"Поиск\" type=\"text\">\r\n                    <img src=\"@/assets/notifications_none.svg\" alt=\"\">\r\n                    <img src=\"@/assets/moon-solid 1.svg\" alt=\"\">\r\n                    <img src=\"@/assets/info_outline.svg\" alt=\"\">\r\n                    <img class=\"admin-logo\" src=\"https://splendorous-granita-f826c7.netlify.app/fozil.svg\" alt=\"\">\r\n                </div>\r\n            </div>\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>ID пользователя</th>\r\n                        <th>Имя пользователя</th>\r\n                        <th>Действие</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr v-for=\"user in paginatedUsers\" :key=\"user.id\">\r\n                        <td>{{ user.id }}</td>\r\n                        <td>{{ user.name }}</td>\r\n                        <td >\r\n                            <!-- Заменяем кнопку на ссылку и передаем имя пользователя -->\r\n                            <router-link class=\"chat-open\" :to=\"{ name: 'PageChat', params: { id: user.id, name: user.name } }\">Открыть\r\n                                чат</router-link>\r\n                        </td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n            <div class=\"pagination\">\r\n                <button @click=\"previousPage\">&lt;</button>\r\n                <button v-for=\"pageNumber in totalPages\" :key=\"pageNumber\" :class=\"{ active: currentPage === pageNumber }\" @click=\"changePage(pageNumber)\">\r\n                    {{ pageNumber }}\r\n                </button>\r\n                <button @click=\"nextPage\">&gt;</button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport './GlobalManager.css';\r\n\r\nexport default {\r\n    name: 'GlobalManager',\r\n    data() {\r\n        return {\r\n            users: [],\r\n            searchQuery: '',\r\n            currentPage: 1,\r\n            pageSize: 10 // Количество пользователей на странице\r\n        };\r\n    },\r\n    mounted() {\r\n        this.fetchUsers();\r\n    },\r\n    computed: {\r\n        filteredUsers() {\r\n            const query = this.searchQuery.toLowerCase();\r\n            return this.users.filter(user => {\r\n                return (\r\n                    user.name.toLowerCase().includes(query)\r\n                );\r\n            });\r\n        },\r\n        totalPages() {\r\n            return Math.ceil(this.filteredUsers.length / this.pageSize);\r\n        },\r\n        paginatedUsers() {\r\n            const startIndex = (this.currentPage - 1) * this.pageSize;\r\n            const endIndex = startIndex + this.pageSize;\r\n            return this.filteredUsers.slice(startIndex, endIndex);\r\n        }\r\n    },\r\n    methods: {\r\n        async fetchUsers() {\r\n            try {\r\n                const response = await fetch('https://jsonplaceholder.typicode.com/users');\r\n                const data = await response.json();\r\n                this.users = data.map(user => ({\r\n                    id: user.id,\r\n                    name: user.name,\r\n                    complaint: `Жалоба на ${user.name}`\r\n                }));\r\n            } catch (error) {\r\n                console.error('Ошибка при загрузке жалоб:', error);\r\n            }\r\n        },\r\n        filterUsers() {\r\n            // Метод фильтрации пользователей остается таким же\r\n            this.currentPage = 1; // При каждом новом поиске переключаемся на первую страницу\r\n        },\r\n        changePage(pageNumber) {\r\n            this.currentPage = pageNumber;\r\n        },\r\n        previousPage() {\r\n            if (this.currentPage > 1) {\r\n                this.currentPage--;\r\n            }\r\n        },\r\n        nextPage() {\r\n            if (this.currentPage < this.totalPages) {\r\n                this.currentPage++;\r\n            }\r\n        }\r\n    }\r\n};\r\n</script>\r\n"],"mappings":"AA6CA,OAAO,qBAAqB;AAE5B,eAAe;EACXA,IAAI,EAAE,eAAe;EACrBC,IAAIA,CAAA,EAAG;IACH,OAAO;MACHC,KAAK,EAAE,EAAE;MACTC,WAAW,EAAE,EAAE;MACfC,WAAW,EAAE,CAAC;MACdC,QAAQ,EAAE,EAAC,CAAE;IACjB,CAAC;EACL,CAAC;EACDC,OAAOA,CAAA,EAAG;IACN,IAAI,CAACC,UAAU,CAAC,CAAC;EACrB,CAAC;EACDC,QAAQ,EAAE;IACNC,aAAaA,CAAA,EAAG;MACZ,MAAMC,KAAI,GAAI,IAAI,CAACP,WAAW,CAACQ,WAAW,CAAC,CAAC;MAC5C,OAAO,IAAI,CAACT,KAAK,CAACU,MAAM,CAACC,IAAG,IAAK;QAC7B,OACIA,IAAI,CAACb,IAAI,CAACW,WAAW,CAAC,CAAC,CAACG,QAAQ,CAACJ,KAAK;MAE9C,CAAC,CAAC;IACN,CAAC;IACDK,UAAUA,CAAA,EAAG;MACT,OAAOC,IAAI,CAACC,IAAI,CAAC,IAAI,CAACR,aAAa,CAACS,MAAK,GAAI,IAAI,CAACb,QAAQ,CAAC;IAC/D,CAAC;IACDc,cAAcA,CAAA,EAAG;MACb,MAAMC,UAAS,GAAI,CAAC,IAAI,CAAChB,WAAU,GAAI,CAAC,IAAI,IAAI,CAACC,QAAQ;MACzD,MAAMgB,QAAO,GAAID,UAAS,GAAI,IAAI,CAACf,QAAQ;MAC3C,OAAO,IAAI,CAACI,aAAa,CAACa,KAAK,CAACF,UAAU,EAAEC,QAAQ,CAAC;IACzD;EACJ,CAAC;EACDE,OAAO,EAAE;IACL,MAAMhB,UAAUA,CAAA,EAAG;MACf,IAAI;QACA,MAAMiB,QAAO,GAAI,MAAMC,KAAK,CAAC,4CAA4C,CAAC;QAC1E,MAAMxB,IAAG,GAAI,MAAMuB,QAAQ,CAACE,IAAI,CAAC,CAAC;QAClC,IAAI,CAACxB,KAAI,GAAID,IAAI,CAAC0B,GAAG,CAACd,IAAG,KAAM;UAC3Be,EAAE,EAAEf,IAAI,CAACe,EAAE;UACX5B,IAAI,EAAEa,IAAI,CAACb,IAAI;UACf6B,SAAS,EAAE,aAAahB,IAAI,CAACb,IAAI;QACrC,CAAC,CAAC,CAAC;MACP,EAAE,OAAO8B,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MACtD;IACJ,CAAC;IACDE,WAAWA,CAAA,EAAG;MACV;MACA,IAAI,CAAC5B,WAAU,GAAI,CAAC,EAAE;IAC1B,CAAC;IACD6B,UAAUA,CAACC,UAAU,EAAE;MACnB,IAAI,CAAC9B,WAAU,GAAI8B,UAAU;IACjC,CAAC;IACDC,YAAYA,CAAA,EAAG;MACX,IAAI,IAAI,CAAC/B,WAAU,GAAI,CAAC,EAAE;QACtB,IAAI,CAACA,WAAW,EAAE;MACtB;IACJ,CAAC;IACDgC,QAAQA,CAAA,EAAG;MACP,IAAI,IAAI,CAAChC,WAAU,GAAI,IAAI,CAACW,UAAU,EAAE;QACpC,IAAI,CAACX,WAAW,EAAE;MACtB;IACJ;EACJ;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}