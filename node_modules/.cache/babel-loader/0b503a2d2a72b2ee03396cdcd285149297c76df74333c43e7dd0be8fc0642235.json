{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  name: 'PageChat',\n  data() {\n    return {\n      user: null,\n      messages: [],\n      newMessage: '',\n      hotResponses: [{\n        id: 1,\n        text: 'Спасибо!'\n      }, {\n        id: 2,\n        text: 'Принято!'\n      }, {\n        id: 3,\n        text: 'Хорошо!'\n      }\n      // Добавьте здесь другие готовые ответы по вашему выбору\n      ]\n    };\n  },\n  created() {\n    const userId = this.$route.params.id;\n    this.loadUserData(userId);\n\n    // Загрузка сообщений из localStorage при создании компонента\n    const storageKey = `chatMessages-${userId}`;\n    const storedMessages = localStorage.getItem(storageKey);\n    if (storedMessages) {\n      this.messages = JSON.parse(storedMessages);\n    }\n  },\n  methods: {\n    async loadUserData(userId) {\n      try {\n        const userResponse = await fetch(`https://jsonplaceholder.typicode.com/users/${userId}`);\n        const userData = await userResponse.json();\n        this.user = {\n          id: userData.id,\n          fullName: userData.name,\n          complaint: userData.complaint\n        };\n        const messagesResponse = await fetch(`API_URL/messages/${userId}`);\n        const messagesData = await messagesResponse.json();\n        this.messages = messagesData.map(message => ({\n          id: message.id,\n          sender: message.sender,\n          text: message.text\n        }));\n      } catch (error) {\n        console.error('Ошибка при загрузке данных пользователя или сообщений:', error);\n      }\n    },\n    sendMessage() {\n      if (this.newMessage.trim() !== '') {\n        const newMessage = {\n          id: Date.now(),\n          sender: 'Вы',\n          text: this.newMessage\n        };\n        this.messages.push(newMessage);\n        this.newMessage = '';\n\n        // Сохранение сообщений только для текущего пользователя\n        const storageKey = `chatMessages-${this.user.id}`;\n        localStorage.setItem(storageKey, JSON.stringify(this.messages));\n\n        // Дополнительно отправляем сообщение на сервер через API\n      }\n    },\n    addHotResponse(response) {\n      this.newMessage += response + ' ';\n    },\n    goBack() {\n      this.$router.go(-1);\n    }\n  }\n};","map":{"version":3,"names":["name","data","user","messages","newMessage","hotResponses","id","text","created","userId","$route","params","loadUserData","storageKey","storedMessages","localStorage","getItem","JSON","parse","methods","userResponse","fetch","userData","json","fullName","complaint","messagesResponse","messagesData","map","message","sender","error","console","sendMessage","trim","Date","now","push","setItem","stringify","addHotResponse","response","goBack","$router","go"],"sources":["/Users/neferuz/Desktop/ImellsAdmin/src/components/views/PageChat.vue"],"sourcesContent":["<template>\r\n    <div class=\"container\">\r\n        <button class=\"go-back\" @click=\"goBack\">Назад</button>\r\n        <div class=\"chat_cod\">\r\n            <div class=\"phone\">\r\n                <div v-if=\"user\">\r\n                    <h3>Чат с {{ user.fullName }}</h3>\r\n                    <div class=\"messages\">\r\n                        <div v-for=\"message in messages\" :key=\"message.id\" class=\"message\">\r\n                            <span>{{ message.sender }}: </span>{{ message.text }}\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"send_whrite\">\r\n                        <input v-model=\"newMessage\" @keyup.enter=\"sendMessage\" placeholder=\"Введите сообщение\" />\r\n                        <button @click=\"sendMessage\">Отправить</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"hot_responses\">\r\n                <button v-for=\"response in hotResponses\" :key=\"response.id\" @click=\"addHotResponse(response.text)\">{{\r\n            response.text }}</button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    name: 'PageChat',\r\n    data() {\r\n        return {\r\n            user: null,\r\n            messages: [],\r\n            newMessage: '',\r\n            hotResponses: [\r\n                { id: 1, text: 'Спасибо!' },\r\n                { id: 2, text: 'Принято!' },\r\n                { id: 3, text: 'Хорошо!' },\r\n                // Добавьте здесь другие готовые ответы по вашему выбору\r\n            ]\r\n        };\r\n    },\r\n    created() {\r\n        const userId = this.$route.params.id;\r\n        this.loadUserData(userId);\r\n\r\n        // Загрузка сообщений из localStorage при создании компонента\r\n        const storageKey = `chatMessages-${userId}`;\r\n        const storedMessages = localStorage.getItem(storageKey);\r\n        if (storedMessages) {\r\n            this.messages = JSON.parse(storedMessages);\r\n        }\r\n    },\r\n    methods: {\r\n        async loadUserData(userId) {\r\n            try {\r\n                const userResponse = await fetch(`https://jsonplaceholder.typicode.com/users/${userId}`);\r\n                const userData = await userResponse.json();\r\n                this.user = {\r\n                    id: userData.id,\r\n                    fullName: userData.name,\r\n                    complaint: userData.complaint\r\n                };\r\n\r\n                const messagesResponse = await fetch(`API_URL/messages/${userId}`);\r\n                const messagesData = await messagesResponse.json();\r\n                this.messages = messagesData.map(message => ({\r\n                    id: message.id,\r\n                    sender: message.sender,\r\n                    text: message.text\r\n                }));\r\n            } catch (error) {\r\n                console.error('Ошибка при загрузке данных пользователя или сообщений:', error);\r\n            }\r\n        },\r\n        sendMessage() {\r\n            if (this.newMessage.trim() !== '') {\r\n                const newMessage = { id: Date.now(), sender: 'Вы', text: this.newMessage };\r\n                this.messages.push(newMessage);\r\n                this.newMessage = '';\r\n\r\n                // Сохранение сообщений только для текущего пользователя\r\n                const storageKey = `chatMessages-${this.user.id}`;\r\n                localStorage.setItem(storageKey, JSON.stringify(this.messages));\r\n\r\n                // Дополнительно отправляем сообщение на сервер через API\r\n            }\r\n        },\r\n        addHotResponse(response) {\r\n            this.newMessage += response + ' ';\r\n        },\r\n        goBack() {\r\n            this.$router.go(-1);\r\n        }\r\n    }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.messages {\r\n    max-height: 200px;\r\n    overflow-y: auto;\r\n    margin-bottom: 10px;\r\n}\r\n\r\n.message {\r\n    margin-bottom: 5px;\r\n}\r\n\r\ninput {\r\n    width: calc(100% - 22px);\r\n    padding: 10px;\r\n    margin-right: 10px;\r\n}\r\n\r\nbutton {\r\n    padding: 10px;\r\n}\r\n\r\n.chat_cod {\r\n    display: grid;\r\n    justify-content: center;\r\n    align-items: center;\r\n}\r\n\r\n.chat_cod h3 {\r\n    text-align: center;\r\n}\r\n\r\n.send_whrite {\r\n    display: flex;\r\n    position: absolute;\r\n    justify-content: center;\r\n    bottom: 0;\r\n    width: 95%;\r\n    margin-bottom: 10px;\r\n}\r\n\r\n.send_whrite input {\r\n    border-radius: 10px;\r\n    border: 0.1 solid rgb(233, 230, 230);\r\n}\r\n.send_whrite button{\r\n    border-radius: 10px;\r\n    background-color: #3366FF;\r\n    color: #FFFFFF;\r\n\r\n}\r\n.hot_responses {\r\n    margin-top: 10px;\r\n}\r\n\r\n.hot_responses button {\r\n    margin-right: 5px;\r\n    margin-bottom: 5px;\r\n    border-radius: 10px;\r\n    background-color: #FFFFFF;\r\n    cursor: pointer;\r\n}\r\n\r\n.phone {\r\n    position: relative;\r\n    /* Необходимо для позиционирования абсолютного элемента внутри него */\r\n    border: 1px solid;\r\n    width: 350px;\r\n    padding: 10px;\r\n    height: 70vh;\r\n    display: grid;\r\n    border-radius: 10px;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}