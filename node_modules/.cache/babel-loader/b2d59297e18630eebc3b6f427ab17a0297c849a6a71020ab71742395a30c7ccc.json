{"ast":null,"code":"import './liveMapPage.css';\nimport { ref, onMounted } from 'vue'; // Импортируем необходимые функции из Vue 3\nimport { LMap, LTileLayer, LMarker } from 'vue3-leaflet';\nimport L from 'leaflet';\nexport default {\n  name: 'liveMapPage',\n  components: {\n    LMap,\n    LTileLayer,\n    LMarker\n  },\n  setup() {\n    const zoom = ref(12); // Настраиваем уровень масштабирования для Ташкента\n    const center = ref([41.311081, 69.240562]); // Координаты центра Ташкента\n    const url = 'http://{s}.tile.osm.org/{z}/{x}/{y}.png';\n    const carIcon = L.icon({\n      iconUrl: 'https://cdn-icons-png.flaticon.com/512/171/171239.png',\n      iconSize: [32, 32],\n      iconAnchor: [16, 16]\n    });\n    const cars = ref([{\n      position: [41.311081, 69.240562],\n      icon: carIcon,\n      driver: 'Водитель 1',\n      route: 'Ташкент - Самарканд'\n    }, {\n      position: [41.321081, 69.250562],\n      icon: carIcon,\n      driver: 'Водитель 2',\n      route: 'Ташкент - Бухара'\n    }]);\n    const isModalOpen = ref(false);\n    const selectedCar = ref(null);\n    const showDriverInfo = car => {\n      selectedCar.value = car;\n      isModalOpen.value = true;\n    };\n    const closeModal = () => {\n      isModalOpen.value = false;\n      selectedCar.value = null;\n    };\n    const moveCars = () => {\n      cars.value = cars.value.map(car => {\n        return {\n          ...car,\n          position: [car.position[0] + (Math.random() - 0.5) * 0.001, car.position[1] + (Math.random() - 0.5) * 0.001]\n        };\n      });\n    };\n    onMounted(() => {\n      setInterval(moveCars, 2000);\n    });\n    return {\n      zoom,\n      center,\n      url,\n      cars,\n      isModalOpen,\n      selectedCar,\n      showDriverInfo,\n      closeModal\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","LMap","LTileLayer","LMarker","L","name","components","setup","zoom","center","url","carIcon","icon","iconUrl","iconSize","iconAnchor","cars","position","driver","route","isModalOpen","selectedCar","showDriverInfo","car","value","closeModal","moveCars","map","Math","random","setInterval"],"sources":["/Users/neferuz/Desktop/ImellsAdmin/src/components/live-map/liveMapPage.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <div class=\"analizing\">\r\n      <h1>Live Map</h1>\r\n      <div class=\"poisk-con\">\r\n        <input v-model=\"searchQuery\" @input=\"filterUsers\" placeholder=\"Поиск\" type=\"text\">\r\n        <img src=\"@/assets/notifications_none.svg\" alt=\"\">\r\n        <img src=\"@/assets/moon-solid 1.svg\" alt=\"\">\r\n        <img src=\"@/assets/info_outline.svg\" alt=\"\">\r\n        <img class=\"admin-logo\" src=\"https://splendorous-granita-f826c7.netlify.app/fozil.svg\" alt=\"\">\r\n      </div>\r\n    </div>\r\n    <div class=\"fleet\">\r\n      <l-map class=\"map-container\" :zoom=\"zoom\" :center=\"center\">\r\n        <l-tile-layer :url=\"url\"></l-tile-layer>\r\n        <l-marker v-for=\"(car, index) in cars\" :key=\"index\" :lat-lng=\"car.position\" :icon=\"car.icon\"\r\n                  @click=\"showDriverInfo(car)\">\r\n        </l-marker>\r\n      </l-map>\r\n    </div>\r\n    <div v-if=\"isModalOpen\" class=\"modal\">\r\n      <div class=\"modal-content\">\r\n        <span class=\"close\" @click=\"closeModal\">&times;</span>\r\n        <h2>Информация о водителе</h2>\r\n        <p><strong>Водитель:</strong> {{ selectedCar.driver }}</p>\r\n        <p><strong>Маршрут:</strong> {{ selectedCar.route }}</p>\r\n        <p><strong>Координаты:</strong> {{ selectedCar.position }}</p>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport './liveMapPage.css';\r\nimport { ref, onMounted } from 'vue'; // Импортируем необходимые функции из Vue 3\r\nimport { LMap, LTileLayer, LMarker } from 'vue3-leaflet';\r\nimport L from 'leaflet';\r\n\r\nexport default {\r\n  name: 'liveMapPage',\r\n  components: {\r\n    LMap,\r\n    LTileLayer,\r\n    LMarker\r\n  },\r\n  setup() {\r\n    const zoom = ref(12); // Настраиваем уровень масштабирования для Ташкента\r\n    const center = ref([41.311081, 69.240562]); // Координаты центра Ташкента\r\n    const url = 'http://{s}.tile.osm.org/{z}/{x}/{y}.png';\r\n\r\n    const carIcon = L.icon({\r\n      iconUrl: 'https://cdn-icons-png.flaticon.com/512/171/171239.png',\r\n      iconSize: [32, 32],\r\n      iconAnchor: [16, 16]\r\n    });\r\n\r\n    const cars = ref([\r\n      { position: [41.311081, 69.240562], icon: carIcon, driver: 'Водитель 1', route: 'Ташкент - Самарканд' },\r\n      { position: [41.321081, 69.250562], icon: carIcon, driver: 'Водитель 2', route: 'Ташкент - Бухара' }\r\n    ]);\r\n\r\n    const isModalOpen = ref(false);\r\n    const selectedCar = ref(null);\r\n\r\n    const showDriverInfo = (car) => {\r\n      selectedCar.value = car;\r\n      isModalOpen.value = true;\r\n    };\r\n\r\n    const closeModal = () => {\r\n      isModalOpen.value = false;\r\n      selectedCar.value = null;\r\n    };\r\n\r\n    const moveCars = () => {\r\n      cars.value = cars.value.map(car => {\r\n        return {\r\n          ...car,\r\n          position: [\r\n            car.position[0] + (Math.random() - 0.5) * 0.001,\r\n            car.position[1] + (Math.random() - 0.5) * 0.001\r\n          ]\r\n        };\r\n      });\r\n    };\r\n\r\n    onMounted(() => {\r\n      setInterval(moveCars, 2000);\r\n    });\r\n\r\n    return { zoom, center, url, cars, isModalOpen, selectedCar, showDriverInfo, closeModal };\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n.fleet {\r\n  height: 70vh;\r\n  border-radius: 20px;\r\n  overflow: hidden; /* Для корректного отображения закругленных углов */\r\n}\r\n\r\n.map-container {\r\n  height: 100%;\r\n  border-radius: 30px; /* Закругление углов карты */\r\n}\r\n\r\n.modal {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  position: fixed;\r\n  z-index: 1000; /* Убедитесь, что модальное окно отображается поверх карты */\r\n  left: 0;\r\n  top: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: rgba(0, 0, 0, 0.4);\r\n}\r\n\r\n.modal-content {\r\n  background-color: #fff;\r\n  padding: 20px;\r\n  border-radius: 10px;\r\n  text-align: center;\r\n}\r\n\r\n.close {\r\n  color: #aaa;\r\n  float: right;\r\n  font-size: 28px;\r\n  font-weight: bold;\r\n  cursor: pointer;\r\n}\r\n\r\n.close:hover,\r\n.close:focus {\r\n  color: black;\r\n  text-decoration: none;\r\n  cursor: pointer;\r\n}\r\n</style>\r\n"],"mappings":"AAiCA,OAAO,mBAAmB;AAC1B,SAASA,GAAG,EAAEC,SAAQ,QAAS,KAAK,EAAE;AACtC,SAASC,IAAI,EAAEC,UAAU,EAAEC,OAAM,QAAS,cAAc;AACxD,OAAOC,CAAA,MAAO,SAAS;AAEvB,eAAe;EACbC,IAAI,EAAE,aAAa;EACnBC,UAAU,EAAE;IACVL,IAAI;IACJC,UAAU;IACVC;EACF,CAAC;EACDI,KAAKA,CAAA,EAAG;IACN,MAAMC,IAAG,GAAIT,GAAG,CAAC,EAAE,CAAC,EAAE;IACtB,MAAMU,MAAK,GAAIV,GAAG,CAAC,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC,EAAE;IAC5C,MAAMW,GAAE,GAAI,yCAAyC;IAErD,MAAMC,OAAM,GAAIP,CAAC,CAACQ,IAAI,CAAC;MACrBC,OAAO,EAAE,uDAAuD;MAChEC,QAAQ,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;MAClBC,UAAU,EAAE,CAAC,EAAE,EAAE,EAAE;IACrB,CAAC,CAAC;IAEF,MAAMC,IAAG,GAAIjB,GAAG,CAAC,CACf;MAAEkB,QAAQ,EAAE,CAAC,SAAS,EAAE,SAAS,CAAC;MAAEL,IAAI,EAAED,OAAO;MAAEO,MAAM,EAAE,YAAY;MAAEC,KAAK,EAAE;IAAsB,CAAC,EACvG;MAAEF,QAAQ,EAAE,CAAC,SAAS,EAAE,SAAS,CAAC;MAAEL,IAAI,EAAED,OAAO;MAAEO,MAAM,EAAE,YAAY;MAAEC,KAAK,EAAE;IAAmB,EACpG,CAAC;IAEF,MAAMC,WAAU,GAAIrB,GAAG,CAAC,KAAK,CAAC;IAC9B,MAAMsB,WAAU,GAAItB,GAAG,CAAC,IAAI,CAAC;IAE7B,MAAMuB,cAAa,GAAKC,GAAG,IAAK;MAC9BF,WAAW,CAACG,KAAI,GAAID,GAAG;MACvBH,WAAW,CAACI,KAAI,GAAI,IAAI;IAC1B,CAAC;IAED,MAAMC,UAAS,GAAIA,CAAA,KAAM;MACvBL,WAAW,CAACI,KAAI,GAAI,KAAK;MACzBH,WAAW,CAACG,KAAI,GAAI,IAAI;IAC1B,CAAC;IAED,MAAME,QAAO,GAAIA,CAAA,KAAM;MACrBV,IAAI,CAACQ,KAAI,GAAIR,IAAI,CAACQ,KAAK,CAACG,GAAG,CAACJ,GAAE,IAAK;QACjC,OAAO;UACL,GAAGA,GAAG;UACNN,QAAQ,EAAE,CACRM,GAAG,CAACN,QAAQ,CAAC,CAAC,IAAI,CAACW,IAAI,CAACC,MAAM,CAAC,IAAI,GAAG,IAAI,KAAK,EAC/CN,GAAG,CAACN,QAAQ,CAAC,CAAC,IAAI,CAACW,IAAI,CAACC,MAAM,CAAC,IAAI,GAAG,IAAI,KAAI;QAElD,CAAC;MACH,CAAC,CAAC;IACJ,CAAC;IAED7B,SAAS,CAAC,MAAM;MACd8B,WAAW,CAACJ,QAAQ,EAAE,IAAI,CAAC;IAC7B,CAAC,CAAC;IAEF,OAAO;MAAElB,IAAI;MAAEC,MAAM;MAAEC,GAAG;MAAEM,IAAI;MAAEI,WAAW;MAAEC,WAAW;MAAEC,cAAc;MAAEG;IAAW,CAAC;EAC1F;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}